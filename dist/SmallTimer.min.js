function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import EventDispatcher from '@zhishaofei3/eventdispatcher';
/**
 * 事件分发类，基于three.js Core/EventDispatcher.js
 */

var SmallTimer = /*#__PURE__*/function (_EventDispatcher) {
  _inherits(SmallTimer, _EventDispatcher);

  var _super = _createSuper(SmallTimer);

  // [只读] 计时器从 0 开始后触发的总次数。
  // 计时器事件间的延迟（以毫秒为单位）
  // 设置的计时器运行总次数。
  // [只读] 计时器的当前状态；如果计时器正在运行，则为 true，否则为 false
  // 初始时间戳
  // 最后一次执行的时间戳
  // 距离下一次执行的剩余时间
  // 使用指定的 delay 和 repeatCount 状态构造新的 Timer 对象，建议 delay 不要低于 20 毫秒。
  function SmallTimer(delay) {
    var _this;

    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;
    var data = arguments.length > 2 ? arguments[2] : undefined;

    _classCallCheck(this, SmallTimer);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "_currentCount", 0);

    _defineProperty(_assertThisInitialized(_this), "delay", 0);

    _defineProperty(_assertThisInitialized(_this), "repeatCount", 0);

    _defineProperty(_assertThisInitialized(_this), "_running", false);

    _defineProperty(_assertThisInitialized(_this), "firstTimestamp", 0);

    _defineProperty(_assertThisInitialized(_this), "lastBeforeTimestamp", 0);

    _defineProperty(_assertThisInitialized(_this), "_pauseNextTimeDiff", 0);

    _defineProperty(_assertThisInitialized(_this), "data", null);

    _defineProperty(_assertThisInitialized(_this), "_timeoutId", 0);

    _this.delay = Math.floor(delay);
    _this.repeatCount = Math.floor(count) || Number.POSITIVE_INFINITY;
    _this.data = data;
    return _this;
  } // 如果计时器尚未运行，则启动计时器。


  _createClass(SmallTimer, [{
    key: "start",
    value: function start() {
      if (this._running) {
        return;
      }

      this._running = true;

      if (this._currentCount < this.repeatCount) {
        if (!this.firstTimestamp) {
          this.firstTimestamp = +new Date();
        }

        this._once(this._pauseNextTimeDiff);
      }
    }
  }, {
    key: "_once",
    value: function _once() {
      var _this2 = this;

      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      this._timeoutId = setTimeout(function () {
        _this2._currentCount++;

        if (_this2._currentCount < _this2.repeatCount) {
          _this2.lastBeforeTimestamp = +new Date();

          _this2._once();

          _this2.dispatchEvent({
            type: Timer.TIMER,
            target: _this2,
            currentTarget: _this2,
            currentCount: _this2.currentCount,
            repeatCount: _this2.repeatCount,
            data: _this2.data
          });
        } else {
          _this2.dispatchEvent({
            type: Timer.TIMER_COMPLETE,
            target: _this2,
            currentTarget: _this2,
            currentCount: _this2.currentCount,
            repeatCount: _this2.repeatCount,
            data: _this2.data
          });
        }
      }, delay || this.delay);
    } // 如果计时器正在运行，则停止计时器，并将 currentCount 属性设回为 0，这类似于秒表的重置按钮。

  }, {
    key: "reset",
    value: function reset() {
      clearTimeout(this._timeoutId);
      this._currentCount = 0;
      this._running = false;
      this.firstTimestamp = 0;
      this.lastBeforeTimestamp = 0;
      this._pauseNextTimeDiff = 0;
    }
  }, {
    key: "pause",
    value: function pause() {
      var lastBefore = this.lastBeforeTimestamp || this.firstTimestamp;
      this._pauseNextTimeDiff = this.delay - (+new Date() - lastBefore);
      clearTimeout(this._timeoutId);
      this._running = false;
    }
  }, {
    key: "currentCount",
    get: function get() {
      return this._currentCount;
    }
  }, {
    key: "running",
    get: function get() {
      return this._running;
    }
  }]);

  return SmallTimer;
}(EventDispatcher);

_defineProperty(SmallTimer, "TIMER", 'TIMER');

_defineProperty(SmallTimer, "TIMER_COMPLETE", 'TIMER_COMPLETE');

export { SmallTimer as default };
